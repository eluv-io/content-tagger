openapi: 3.0.3
info:
  title: Tagstore API
  version: 1.0.0
  description: API for managing tags on content objects.

# servers:
#   - url: http://localhost:8080
#     description: Local dev server

components:
  responses:
    UnauthorizedError:
      description: Provided authentication token cannot access the content object.
  schemas:
    TagResponse:
      description:
        A Tag represents a labeled segment of a content object.
        Tags are associated with a specific job, which groups together tags created by the same
        author for the same track. Tags can include additional metadata in the `additional_properties`
        field, which is a JSON object that can store arbitrary key-value pairs. A common use case for the
        additional properties is to store bounding box information for video tags which define where in the frame 
        a tag was found, and this can be used for rendering overlays.
      type: object
      required:
        - id
        - job_id
        - start_time
        - end_time
        - tag
        - track
      properties:
        id:
          type: string
          example: "123"
        job_id:
          type: string
          example: "234"
        start_time:
          type: integer
          example: 5000
          description: start time of the tag in milliseconds
        end_time:
          type: integer
          example: 8000
          description: end time of the tag in milliseconds
        tag:
          type: string
          example: "hot dog"
        track:
          type: string
          example: "hot dog detection"
        additional_properties:
          type: object
          example:
            frame_tags:
              "25": {"confidence": 0.6, "box": {"x1":0.3, "y1": 0.6, "x2":0.4, "y2":0.75}}
              "30": {"confidence": 0.65, "box": {"x1":0.35, "y1": 0.65, "x2":0.45, "y2":0.8}}
    TagWrite:
      type: object
      required:
        - id
        - job_id
        - start_time
        - end_time
        - tag
        - track
      properties:
        start_time:
          type: integer
          example: 5000
          description: start time of the tag in milliseconds
        end_time:
          type: integer
          example: 8000
          description: end time of the tag in milliseconds
        tag:
          type: string
          example: "hot dog"
        source:
          type: string
          example: "hqp_JBFUvSFH4vpz386EDjVD8BL7vz3RK89sXRXfH9Ajxadya2vE"
          default: "content"
          description: The source of the tag with respect to the content. Could be a part or a file asset, or the full-length content.
            probably will not be touched by the user directly.
        additional_properties:
          type: object
          example:
            frame_tags:
              "25": {"confidence": 0.6, "box": {"x1":0.3, "y1": 0.6, "x2":0.4, "y2":0.75}}
              "30": {"confidence": 0.65, "box": {"x1":0.35, "y1": 0.65, "x2":0.45, "y2":0.8}}
    Job:
      type: object
      description: >
        A Job groups together one or more tags for a given (QID, track, author).
        Jobs are created explicitly or implicitly when tags are uploaded.
      properties:
        id:
          type: integer
        qid:
          type: string
        author:
          type: string
        track:
          type: string
        timestamp:
          type: string
          format: date-time
    Meta:
      type: object
      properties:
        total: 
          type: integer
          description: Total number of results before pagination
          example: 100
        count: 
          type: integer
          description: Number of results in the response
          example: 1
        start: 
          type: integer
          example: 5
        limit: 
          type: integer
          example: 1

  securitySchemes:
    TokenAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: |
        Base64 encoded JSON element of the following form: `{ "qspace_id": "...", "addr":"...", "txid":"..." }`
      description: |
        <p/>
        <div class="auth">

        Access to content fabric objects and resources is governed by an Ethereum-compatible blockchain.  Each API resource (for example a library, content type or content object) is governed by a blockchain 'smart-contract'.  All content fabric API operations require authentication using the "Bearer" token scheme.  This scheme encompasses both "authentication" (identifying the caller) and "authorization" (specification of the operations that the caller has access to).  The "Bearer" token is obtained by executing specific 'smart-contract' blockchain transactions for the API resources being accessed.

        Private fabric nodes or development environments can also be configured for alternative authentication schemes.  Currently this includes "Basic" authentication and, for development environments, no authentication.

        The "Bearer" token can be specified as follows:

        <ol>
          <li>
            as an HTTP header
            <code>Authorization: Bearer TOKEN</code>
          </li>
          <li>
            as a query parameter
            <code>?authorization=TOKEN</code>
          </li>
        </ol>

        Bearer token general format: <code>PAYLOAD.SIGNATURE</code>

        Where <code>PAYLOAD</code> is a base64 encoding of the JSON object:
        <pre class="description">
          {
            "qspace_id":  "SPACE-ID",
            "qlib_id": "LIBRARY-ID",
            "addr": "BLOCKCHAIN-ADDRESS",
            "tx_id" : "BLOCKCHAIN-TRANSACTION-ID"
          }
        </pre>

        <code>SIGNATURE</code> is a base64 encoding of the Ethereum signature, calculated as specified by the Ethereum protocol: https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign

        Creating, modifying and accessing content fabric objects require either "access" or "update" transaction IDs.  These operations can only be executed by full blockchain user accounts, which must be funded in order to execute transactions.  Once the transaction is executed by the blockchain, its ID will be specified in the token field "tx_id".

        Consumer operations don't require funded blockchain accounts, and they are restricted to "viewer" operations, which are only available on content objects that have been specifically published for consumer access.  The token is generated by executing a state channel transaction - the state channel allows for low latency response to the user (not requiring waiting for the execution of a blockchain transaction) and mass scalability by posting aggregated transactions to the blockchain in large batches.
        </div>

security:
  - TokenAuth: []

paths:
  /{qid}/tags/{id}:
    get:
      tags: [Tags]
      summary: Get a tag by id
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: The ID of the tag to retrieve.
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Tag not found
    patch:
      tags: [Tags]
      summary: Update an existing tag.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tag to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - start_time
                - end_time
                - tag
              properties:
                start_time:
                  type: integer
                  example: 5000
                end_time:
                  type: integer
                  example: 10000
                tag:
                  type: string
                  example: "Updated tag content"
                additional_info:
                  type: object
                  example:
                    new_field: "new value"
              description: >
                Any subset of these fields may be provided.
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Tag not found
    delete:
      tags: [Tags]
      summary: Delete a tag
      description: Permanently deletes a video tag by its ID.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tag to delete.
      responses:
        '204':
          description: Tag deleted successfully (no content returned)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Tag not found
  /{qid}/tags:
    get:
      tags: [Tags]
      summary: Query tags
      description: >
        Returns a list of tags matching the query. If `job_id` is not specified, then
        the result will include tags from the most recent job per track and per author for each taggable source in the
        content.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: query
          name: job_id
          schema:
            type: string
          description: Restrict tags to a specific job.
        - in: query
          name: start_time_gte
          schema:
            type: integer
          description: Filter tags with start_time >= specified value (in milliseconds)
        - in: query
          name: start_time_lte
          schema:
            type: integer
          description: Filter tags with start_time <= specified value (in milliseconds)
        - in: query
          name: end_time_gte
          schema:
            type: integer
          description: Filter tags with end_time >= specified value (in milliseconds)
        - in: query
          name: end_time_lte
          schema:
            type: integer
          description: Filter tags with end_time <= specified value (in milliseconds)
        - in: query
          name: track
          schema:
            type: string
          example: "celebrity detection"
        - in: query
          name: author
          schema:
            type: string
          example: "alice"
        - in: query
          name: text_contains
          schema:
            type: string
          example: "dog"
          description: Filter tags to those containing this substring
        - in: query
          name: start
          schema:
            type: integer
            default: 0
          description: Offset for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Number of results to return
      responses:
        '200':
          description: List of matching tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/TagResponse'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
                      
                    
    post:
      tags: [Tags]
      summary: Add a list of tags
      description: >
        Adds one or more tags. Tags are always associated with a job. Either you can
        specify the `job_id` explicitly, or provide the triplet (`qid`, `author`, `track`) to automatically add to the most
        recent job with that triplet (creating a new job if none exists).
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id:
                  type: string
                  description: An existing job ID to add tags to. If not provided, then `author` and `track` must be provided. 
                    If provided, then `author` and `track` will be ignored.
                author:
                  type: string
                  description: Job author (required if no job_id).
                track:
                  type: string
                  description: Job track (required if no job_id).
                tags:
                  type: array
                  description: List of video tags to add.
                  items:
                    type: object
                    properties:
                      start_time:
                        type: integer
                        default: 0
                      end_time:
                        type: integer
                        default: 0
                      tag:
                        type: string
                        default: ""
                      source:
                        type: string
                        default: "content"
                           
                      additional_info:
                        type: object
                        description: Additional tag metadata as a JSON object. A common use case is to store bounding box
                          information for video tags here.
                        example: {"frame_tags": {
                            "15": {"confidence": 0.9, "box": {"x1": 0.1, "y1": 0.2, "x2": 0.3, "y2": 0.4}},
                            "24": {"confidence": 0.8, "box": {"x1": 0.25, "y1": 0.35, "x2": 0.4, "y2": 0.5}}
                          }}
            examples:
              job_id_example:
                summary: Add tags to an existing job
                value:
                  job_id: "12345"
                  tags: 
                    - start_time: 1000
                      end_time: 2000
                      tag: "dog"
                    - start_time: 3000
                      end_time: 3500
                      tag: "cat"
                      additional_info:
                        frame_tags:
                          "25": {"confidence": 0.6, "box": {"x1":0.3, "y1": 0.6, "x2":0.4, "y2":0.75}}
                          "30": {"confidence": 0.65, "box": {"x1":0.35, "y1": 0.65, "x2":0.45, "y2":0.8}}

              with_author_track_example:
                summary: Add tags by (author, track)
                description: Add the tags to the most recent job for (qid, author, track), creating one if it doesn't exist
                value:
                  author: "alice"
                  track: "object_detection"
                  tags:
                    - start_time: 40
                      end_time: 45
                      text: ["cat"]

      responses:
        '200':
          description: Tags created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                  created_tag_ids:
                    type: array
                    items:
                      type: string
              example:
                job_id: "12345"
                created_tag_ids: ["67890", "67891"]
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
  /{qid}/jobs/{id}:
    get:
      tags: [Jobs]
      summary: Get a job by ID
      description: Retrieve a single job by its unique ID.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the job to retrieve.
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Job not found
    delete:
      tags: [Jobs]
      summary: Delete a job
      description: >
        Permanently deletes a job by its ID.  
        All tags associated with the job will also be deleted.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the job to delete.
      responses:
        '204':
          description: Job (and all related tags) deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Job not found
  /{qid}/jobs:
    get:
      tags: [Jobs]
      summary: Query jobs
      description: >
        Returns a list of jobs matching the query.  
        Supports filtering by QID, author, and track.  
        Results are paginated with `start` and `limit`.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: query
          name: author
          schema:
            type: string
          required: false
          description: Filter jobs by author.
        - in: query
          name: track
          schema:
            type: string
          required: false
          description: Filter jobs by track.
        - in: query
          name: start
          schema:
            type: integer
          required: false
          description: Offset for pagination.
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of results to return.
      responses:
        '200':
          description: List of matching jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid query parameters
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags: [Jobs]
      summary: Create a job
      description: Creates a new job and returns the `job_id`. If a job with the same (`qid`, `author`, `track`) triplet already exists,
        then future read requests which don't specify a `job_id` explicitly will resolve to the most recent one. So, this
        call will have the effect of clearing previous tags for that triplet in the default read path.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - track
                - author
              properties:
                author:
                  type: string
                track:
                  type: string
                additional_info:
                  type: object
                  description: Additional job metadata
      responses:
        '200':
          description: Job created
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{qid}/tags/upload:
    post:
      tags: [Tags]
      summary: Bulk upload tags from multiple tracks
      description: >
        Upload tags from multiple tracks at once in one json body.
        Returns a map from `track` to `job_id`.
      parameters:
        - in: path
          required: true
          name: qid
          schema:
            type: string
          description: Content fabric content id.
        - in: query
          name: author
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: File processed successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  celebrity_detection: "12345"
                  speech_recognition: "67890"
                description: >
                  A map where each key is a track name (string) from the uploaded file
                  and each value is the corresponding job ID (integer) that was either
                  created or reused for that track.
              example:
                "celebrity_detection": 101
                "shot_detection": 102
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'